#!/usr/bin/env bash

function printHelp() {
  cat <<EOF
Usage: hyprfreze (-a | -p <pid> | -n <name> | -r) [options]

Utility to suspend a game process (or other programs) in Hyprland

Options:
  -h, --help            show help message

  -a, --active          toggle suspend by active window
  -p, --pid             toggle suspend by process id
  -n, --name            toggle suspend by process name/command
  -r, --prop            toggle suspend by clicking on window (hyprprop must be installed)

  -s, --silent          don't send notif
  -t, --notif-timeout   notificaiton timeout in milliseconds (default 5000)
  --info                show information about process
  --dry-run             does not suspend/resume process, use with --info
  --debug               enable debug mode
EOF
}

function debugPrint() {
  if [[ "$DEBUG" -eq 1 ]; then
    echo "[DEBUG] $1"
  fi
}

function toggleFreeze() {S
  # Skip function if --dry-run flag was provided
  if [[ $DRYRUN == "1" ]]; then return 0; fi

  # Get pids of process tree
  PIDS=$(pstree -p "$PID" | grep -oP '\(\K[^\)]+')

  debugPrint "PIDs: $PIDS"

  # Prevent suspending itself
  local pid_of_script=$$
  if echo "$PIDS" | grep "$pid_of_script"; then
    echo "You are trying to suspend the hyprfreeze process."
    exit 1
  fi

  # Suspend or resume processes
  if [[ "$(ps -o state= "$PID")" == T ]]; then
    debugPrint "Resuming processes..."
    kill -CONT $PIDS 2>/dev/null && echo "Resumed $(ps -p "$PID" -o comm= 2/dev/null) (PID $PID)" || exit 1
  else
    debugPrint "Suspending processes..."
    kill -STOP $PIDS 2>/dev/null && echo "Suspended $(ps -p "$PID" -o comm= 2/dev/null) (PID $PID)" || exit 1
  fi
}

function getPidByActive() {
  debugPrint "Getting PID by active window..."
  PID=$(hyprctl activewindow -j | jq '.pid')
  debugPrint "PID by active window: $PID"
}

function getPidByPid() {
  debugPrint "Getting PID by PID: $1"
  # Check if process pid exists
  if ! ps -p "$1" &>/dev/null; then
    echo "Process ID $1 not found"
    exit 1
  fi

  PID=$1
}

function getPidByName() {
  debugPrint "Getting PID by name: $1"
  # Check if proces name exists
  if ! pidof -x "$1" >/dev/null; then
    echo "Process name $1 not found
    exit 1
  fi

  # Get last process
  PID=$(pidof "$1" | awk '{print $NF}')
}

function getPidByProp() {
  debugPrint "Getting PID by prop..."
  if ! command -v hyprprop; then
    echo "You need to install 'hyprprop' to use this feature. (https://github.com/vilari-mickopf/hyprprop)"
    exit 1
  fi

  PID=$(hyprprop | jq '.pid')
  debugPrint "PID by prop: $PID"
}

function printInfo() {
  debugPrint "Printing process info...\n"
  echo -e "$(tput bold)Process tree:$(tput sgr0)"
  ps -p "$PID" 2>/dev/null && pstree -p "$PID"

  echo -e "\n$(tput bold)Process threads:$(tput sgr0)"
  ps -eLo pid,tid,comm | grep "$PID" 2>/dev/null

  echo -e "\n$(tput bold)Process ID$(tput sgr0) = $PID \
    \n$(tput bold)Process name$(tput sgr0) = $(ps -p "$PID" -o comm= 2>/dev/null) \
    \n$(tput bold)Process state$(tput sgr0) = $(ps -p "$PID" -o comm= 2>/dev/null)\n"
}

function sendNotification() {
  
}
